/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include <iostream>
#include <sstream>

#include "fmt_types.h"
#include "fileio.h"
#include "fmt_utils.h"

#include "fmt_codec_sct_defs.h"
#include "fmt_codec_sct.h"

#include "error.h"

fmt_codec::fmt_codec() : fmt_codec_base()
{}

fmt_codec::~fmt_codec()
{}

std::string fmt_codec::fmt_version()
{
    return std::string("0.1.0");
}

std::string fmt_codec::fmt_quickinfo()
{
    return std::string("Scitex CT");
}

std::string fmt_codec::fmt_filter()
{
    return std::string("*.sct *.ct ");
}

std::string fmt_codec::fmt_mime()
{
    return std::string();
}

std::string fmt_codec::fmt_pixmap()
{
    return std::string("");
}

s32 fmt_codec::fmt_read_init(const std::string &file)
{
    frs.open(file.c_str(), ios::binary | ios::in);

    if(!frs.good())
        return SQE_R_NOFILE;

    currentImage = -1;
    read_error = false;

    finfo.animated = false;
    finfo.images = 0;

    return SQE_OK;
}

s32 fmt_codec::fmt_read_next()
{
    currentImage++;

    if(currentImage)
        return SQE_NOTOK;

    finfo.image.push_back(fmt_image());

    s8	comment[0x50 + 1], sig[2];

    if(!frs.readK(comment, sizeof(comment) - 1)) return SQE_R_BADFILE;
    if(!frs.readK(sig, sizeof(sig))) return SQE_R_BADFILE;

    comment[0x50] = '\0';

    frs.seekg(0x400, ios_base::beg);

    if(!frs.readK(&sct, sizeof(sct_header))) return SQE_R_BADFILE;

    sct.format = fmt_utils::konvertWord(sct.format);

    printf("Comment: %s\nSig: %c%c\nChannels: %d\nformat: %d\n", comment, sig[0], sig[1], sct.channels, sct.format);

    if(sct.format != SCT_FORMAT_RGB && sct.format != SCT_FORMAT_GRAY && sct.format != SCT_FORMAT_CMYK)
	return SQE_R_BADFILE;

    if(sct.format == SCT_FORMAT_RGB && sct.channels != 3)
	return SQE_R_BADFILE;

    if(sct.format == SCT_FORMAT_GRAY && sct.channels != 1)
	return SQE_R_BADFILE;

    if(sct.format == SCT_FORMAT_CMYK && sct.channels != 4)
	return SQE_R_BADFILE;

    if((sct.width[0] != '+' && sct.width[0] != '-') || (sct.height[0] != '+' && sct.height[0] != '-'))
	return SQE_R_BADFILE;

    std::string buf;
    
    buf.assign(sct.width, sizeof(sct.width));

    stringstream ss(buf);

    ss.setf(ios_base::hex);

    ss >> finfo.image[currentImage].h;

    buf.assign(sct.height, sizeof(sct.height));

    stringstream ss1(buf);

    ss1.setf(ios_base::hex);

    ss1 >> finfo.image[currentImage].w;

    printf("W: %d\n", finfo.image[currentImage].w);
    printf("H: %d\n", finfo.image[currentImage].h);

    finfo.images++;
    finfo.image[currentImage].compression = "-";

    switch(sct.format)
    {
	case SCT_FORMAT_RGB:
	    finfo.image[currentImage].colorspace = "RGB";
	    finfo.image[currentImage].bpp = 24;
	break;

	case SCT_FORMAT_GRAY:
	    finfo.image[currentImage].colorspace = "Grayscale";
	    finfo.image[currentImage].bpp = 8;
	break;

	case SCT_FORMAT_CMYK:
	    finfo.image[currentImage].colorspace = "CMYK";
	    finfo.image[currentImage].bpp = 24;
	break;
    }

    finfo.image[currentImage].passes = sct.channels;

    finfo.meta.push_back(fmt_metaentry());

    finfo.meta[0].group = "SCT Comment";
    finfo.meta[0].data = comment;

    frs.seekg(0x800, ios_base::beg);

    layer = -1;

    return (frs.good()) ? SQE_OK : SQE_R_BADFILE;
}

s32 fmt_codec::fmt_read_next_pass()
{
    layer++;

    return SQE_OK;
}

s32 fmt_codec::fmt_read_scanline(RGBA *scan)
{
    RGB rgb;
    RGBA rgba;
    u8	c;

    memset(scan, 255, finfo.image[currentImage].w * sizeof(RGBA));

    switch(sct.format)
    {
	case SCT_FORMAT_RGB:
	    for(s32 i = 0;i < finfo.image[currentImage].w;i++)
	    {
		if(!frs.readK(&c, sizeof(u8))) return SQE_R_BADFILE;

		switch(layer)
		{
		    case 0: (scan+i)->r = c; break;
		    case 1: (scan+i)->g = c; break;
		    case 2: (scan+i)->b = c; break;
		}
	    }
	break;

	case SCT_FORMAT_GRAY:
	break;

	case SCT_FORMAT_CMYK:
	break;
    }

    return SQE_OK;
}

void fmt_codec::fmt_read_close()
{
    frs.close();

    finfo.meta.clear();
    finfo.image.clear();
}

void fmt_codec::fmt_getwriteoptions(fmt_writeoptionsabs *opt)
{
    opt->interlaced = false;
    opt->passes = 1;
    opt->compression_scheme = CompressionNo;
    opt->compression_min = 0;
    opt->compression_max = 0;
    opt->compression_def = 0;
    opt->needflip = false;
}

s32 fmt_codec::fmt_write_init(const std::string &file, const fmt_image &image, const fmt_writeoptions &opt)
{
    if(!image.w || !image.h || file.empty())
        return SQE_W_WRONGPARAMS;

    writeimage = image;
    writeopt = opt;

    fws.open(file.c_str(), ios::binary | ios::out);

    if(!fws.good())
        return SQE_W_NOFILE;

    return SQE_OK;
}

s32 fmt_codec::fmt_write_next()
{
    return SQE_OK;
}

s32 fmt_codec::fmt_write_next_pass()
{
    return SQE_OK;
}

s32 fmt_codec::fmt_write_scanline(RGBA * /*scan*/)
{
    return SQE_OK;
}

void fmt_codec::fmt_write_close()
{
    fws.close();
}

bool fmt_codec::fmt_writable() const
{
    return false;
}

bool fmt_codec::fmt_readable() const
{
    return true;
}
