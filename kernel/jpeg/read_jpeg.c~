/*  This file is part of SQuirrel (http://ksquirrel.sf.net) libraries

    Copyright (c) 2004 Dmitry Baryshev <ckult@yandex.ru>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "read_jpeg.h"


char* fmt_version()
{
    return (char*)"0.9.1";
}

char* fmt_quickinfo()
{
    return (char*)"JPEG compressed";
}

char* fmt_extension()
{
    return (char*)"jpg,jpeg,jpe";
}

const unsigned char* fmt_pixmap(int *size)
{
    *size = 238;

    return ((const unsigned char*)"137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,4,3,0,0,0,237,221,226,82,0,0,0,21,80,76,84,69,4,132,132,4,4,4,192,192,192,255,255,255,0,0,0,128,128,0,134,134,134,79,212,14,132,0,0,0,1,116,82,78,83,0,64,230,216,102,0,0,0,1,98,75,71,68,0,136,5,29,72,0,0,0,9,112,72,89,115,0,0,11,17,0,0,11,17,1,127,100,95,145,0,0,0,7,116,73,77,69,7,212,10,17,19,35,2,169,169,215,166,0,0,0,82,73,68,65,84,120,156,61,142,193,13,192,48,8,3,89,33,125,244,15,43,88,108,144,76,64,217,127,149,18,135,214,175,147,101,108,68,100,108,73,233,50,51,37,0,208,209,80,214,108,201,74,234,145,5,71,134,23,68,186,123,18,80,120,156,244,216,153,2,102,190,171,191,231,52,67,123,148,171,124,227,126,1,202,77,25,76,179,115,138,216,0,0,0,0,73,69,78,68,174,66,96,130");
}

/* inits decoding of 'file': opens it, fills struct fmt_info  */
int fmt_init(fmt_info **finfo, const char *file)
{
    *finfo = (fmt_info*)calloc(1, sizeof(fmt_info));
    
    if(!*finfo)
	return SQERR_NOMEMORY;
	
    (*finfo)->w = 0;
    (*finfo)->h = 0;
    (*finfo)->bpp = 0;
    (*finfo)->hasalpha = FALSE;
    (*finfo)->needflip = FALSE;
    (*finfo)->images = 1;
    (*finfo)->animated = FALSE;

    (*finfo)->fptr = fopen(file, "rb");
    
    if(!((*finfo)->fptr))
    {
	free(*finfo);
	return SQERR_NOFILE;
    }
    
    return SQERR_OK;
}

METHODDEF(void) my_error_exit(j_common_ptr cinfo)
{
    my_error_ptr myerr;

    printf("libSQ_read_jpeg: JPEG Error!\n");

    myerr = (my_error_ptr) cinfo->err;

    (*cinfo->err->output_message) (cinfo);

    longjmp(myerr->setjmp_buffer, 1);
}

struct jpeg_decompress_struct	cinfo;
struct my_error_mgr 		jerr;
int 				row_stride;
JSAMPARRAY 			buffer;

int fmt_read_info(fmt_info *finfo)
{
    int i;
    char type[25];
    
    cinfo.err = jpeg_std_error(&jerr.pub);
    jerr.pub.error_exit = my_error_exit;
    
    if(setjmp(jerr.setjmp_buffer)) 
    {
	jpeg_destroy_decompress(&cinfo);
	fclose(finfo->fptr);
	return SQERR_NOTOK;
    }

    jpeg_create_decompress(&cinfo);
    jpeg_stdio_src(&cinfo, finfo->fptr);
    jpeg_read_header(&cinfo, TRUE);

    if(cinfo.jpeg_color_space == JCS_GRAYSCALE)
    {
	finfo->bpp = 1;
        cinfo.out_color_space = JCS_RGB;
	cinfo.desired_number_of_colors = 256;
	cinfo.quantize_colors = FALSE;
	cinfo.two_pass_quantize = FALSE;

	finfo->pal = (RGB*)calloc(256, sizeof(RGB));
	
	for(i = 0;i < 256;i++)
	    (finfo->pal)[i].r = (finfo->pal)[i].g = (finfo->pal)[i].b = i;
    }
    else
	finfo->bpp = 24;

    jpeg_start_decompress(&cinfo);

    finfo->w = cinfo.output_width;
    finfo->h = cinfo.output_height;
    finfo->pal_entr = 256;
    
    buffer = (*cinfo.mem->alloc_sarray)((j_common_ptr)&cinfo, JPOOL_IMAGE, cinfo.output_width * cinfo.output_components, 1);

    switch(cinfo.jpeg_color_space)
    {
	case JCS_GRAYSCALE: sprintf(type, "Grayscale (black&white)");break;
	case JCS_RGB: sprintf(type, "RGB");break;
	case JCS_YCbCr: sprintf(type, "YUV");break;
	case JCS_CMYK: sprintf(type, "CMYK");break;
	case JCS_YCCK: sprintf(type, "YCCK");break;

	default:
	    sprintf(type, "Unknown");
    }

    asprintf(&finfo->dump, "%s\n%ldx%ld\n%d\n%s\nJPEG\n%d\n%ld\n",
    fmt_quickinfo(),
    finfo->w,finfo->h,
    finfo->bpp,type,
    finfo->images,
    ((finfo->w * finfo->h) << 2));

    row_stride = cinfo.output_width * cinfo.output_components;

    return SQERR_OK;
}

/*  
 *    reads scanline
 *    scan should exist, e.g. RGBA scan[N], not RGBA *scan  
 */
int fmt_read_scanline(fmt_info *finfo, RGBA *scan)
{
    unsigned int i;

    memset(scan, 255, finfo->w * 4);

    (void)jpeg_read_scanlines(&cinfo, buffer, 1);

    for(i = 0;i < finfo->w;i++)
	memcpy(scan+i, buffer[0] + i*3, 3);

    return SQERR_OK;
}

int fmt_readimage(const char *file, RGBA **image, char **dump)
{
    struct jpeg_decompress_struct	m_cinfo;
    struct my_error_mgr 		m_jerr;
    int 				m_row_stride;
    unsigned int 			i, j;
    JSAMPARRAY 				m_buffer;
    char 				m_type[25];

    fmt_info *finfo = (fmt_info*)calloc(1, sizeof(fmt_info));
    
    if(!finfo)
	return SQERR_NOMEMORY;
	
    finfo->w = 0;
    finfo->h = 0;
    finfo->bpp = 0;
    finfo->hasalpha = FALSE;
    finfo->needflip = FALSE;
    finfo->images = 1;
    finfo->animated = FALSE;
    
    finfo->fptr = fopen(file, "rb");

    if(!finfo->fptr)
    {
	free(finfo);
	return SQERR_NOFILE;
    }

    m_cinfo.err = jpeg_std_error(&m_jerr.pub);
    m_jerr.pub.error_exit = my_error_exit;
    
    if(setjmp(m_jerr.setjmp_buffer)) 
    {
	jpeg_destroy_decompress(&m_cinfo);
	fclose(finfo->fptr);
	return SQERR_NOTOK;
    }

    jpeg_create_decompress(&m_cinfo);
    jpeg_stdio_src(&m_cinfo, finfo->fptr);
    jpeg_read_header(&m_cinfo, TRUE);

    if(m_cinfo.jpeg_color_space == JCS_GRAYSCALE)
    {
	finfo->bpp = 8;
        m_cinfo.out_color_space = JCS_RGB;
	m_cinfo.desired_number_of_colors = 256;
	m_cinfo.quantize_colors = FALSE;
	m_cinfo.two_pass_quantize = FALSE;

	finfo->pal = (RGB*)calloc(256, sizeof(RGB));
	
	for(i = 0;i < 256;i++)
	    (finfo->pal)[i].r = (finfo->pal)[i].g = (finfo->pal)[i].b = i;
    }
    else
	finfo->bpp = 24;

    jpeg_start_decompress(&m_cinfo);

    finfo->w = m_cinfo.output_width;
    finfo->h = m_cinfo.output_height;
    finfo->pal_entr = 256;

    m_buffer = (*m_cinfo.mem->alloc_sarray)((j_common_ptr)&m_cinfo, 
	    JPOOL_IMAGE, m_cinfo.output_width * m_cinfo.output_components, 1);


    switch(m_cinfo.jpeg_color_space)
    {
	case JCS_GRAYSCALE: sprintf(m_type, "Grayscale (black&white)");break;
	case JCS_RGB: sprintf(m_type, "RGB");break;
	case JCS_YCbCr: sprintf(m_type, "YUV");break;
	case JCS_CMYK: sprintf(m_type, "CMYK");break;
	case JCS_YCCK: sprintf(m_type, "YCCK");break;

	default:
	    sprintf(m_type, "Unknown");
    }

    asprintf(dump, "%s\n%ld\n%ld\n%d\n%s\nJPEG\n%d\n%ld\n",
    fmt_quickinfo(),
    finfo->w,finfo->h,
    finfo->bpp,m_type,
    finfo->images,
    ((finfo->w * finfo->h) << 2));

    m_row_stride = m_cinfo.output_width * m_cinfo.output_components;

    *image = (RGBA*)realloc(*image, finfo->w * finfo->h * 4);
    
    if(!*image)
    {
	fprintf(stderr, "libSQ_read_jpeg: Image is null!\n");
	fclose(finfo->fptr);
	free(finfo);
	return SQERR_NOMEMORY;
    }

    memset(*image, 255, finfo->h * finfo->w * 4);

    i = 0;

    while(m_cinfo.output_scanline < m_cinfo.output_height)
    {
	(void)jpeg_read_scanlines(&m_cinfo, m_buffer, 1);

        for(j = 0;j < finfo->w;j++)
	    memcpy(*image + i*finfo->w + j, m_buffer[0] + j*3, 3);

	i++;
    }

    (void)jpeg_finish_decompress(&m_cinfo);
    jpeg_destroy_decompress(&m_cinfo);
    fclose(finfo->fptr);
    free(finfo);
    
    return SQERR_OK;
}

int fmt_close(fmt_info *finfo)
{
    (void)jpeg_finish_decompress(&cinfo);
    jpeg_destroy_decompress(&cinfo);
    fclose(finfo->fptr);

    return SQERR_OK;
}
