/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2004 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "read_xwd.h"
#include "endian.h"

FILE *fptr;
int currentImage, bytes, pal_entr;
RGB *pal;

typedef unsigned char uchar;

const char* fmt_version()
{
    return (const char*)"0.3.3";
}
    
const char* fmt_quickinfo()
{
    return (const char*)"X-Windows Dump";
}
	
const char* fmt_filter()
{
    return (const char*)"*.xwd ";
}
	    
const char* fmt_mime()
{
    return (const char*)0;
}

const char* fmt_pixmap()
{
    return (const char*)"";
}

int fmt_init(fmt_info *finfo, const char *file)
{
    if(!finfo)
	return SQERR_NOMEMORY;

    fptr = fopen(file, "rb");
	        
    if(!fptr)
	return SQERR_NOFILE;

    currentImage = -1;
    finfo->passes = 1;
    pal = 0;

    return SQERR_OK;
}

int fmt_next(fmt_info *finfo)
{
    XWDFileHeader xfh;

    currentImage++;

    if(currentImage)
	return SQERR_NOTOK;

    if(!finfo->image)
        return SQERR_NOMEMORY;

    XWDColor	color;
    char 	str[256];
    int		i, ncolors;

    memset(&finfo->image[currentImage], 0, sizeof(fmt_image));

    fread(&xfh, sizeof(XWDFileHeader), 1, fptr);

    fgets(str, 255, fptr);

    fseek(fptr, lLE2BE(xfh.header_size), SEEK_SET);

    pal_entr = ncolors = lLE2BE(xfh.ncolors);

    if((pal = (RGB*)calloc(ncolors, sizeof(RGB))) == NULL)
    {
//	fclose(fptr);	
	return SQERR_NOMEMORY;
    }

    for(i = 0;i < ncolors;i++)
    {
	fread(&color, sizeof(XWDColor), 1, fptr);

	pal[i].r = (uchar)sLE2BE(color.red);
	pal[i].g = (uchar)sLE2BE(color.green);
	pal[i].b = (uchar)sLE2BE(color.blue);
    }

    finfo->image[currentImage].w = lLE2BE(xfh.pixmap_width);
    finfo->image[currentImage].h = lLE2BE(xfh.pixmap_height);
    finfo->image[currentImage].bpp = lLE2BE(xfh.pixmap_depth);

    bytes = finfo->image[currentImage].w * finfo->image[currentImage].h * sizeof(RGBA);
            
    finfo->images++;

    asprintf(&finfo->image[currentImage].dump, "%s\n%dx%d\n%d\n%s\nNO\n%d\n",
	fmt_quickinfo(),
	finfo->image[currentImage].w,
	finfo->image[currentImage].h,
	finfo->image[currentImage].bpp,
	"RGB",
	bytes);

    trace(finfo->image[currentImage].dump);

    return SQERR_OK;
}

int fmt_next_pass(fmt_info *)
{
    return SQERR_OK;
}

int fmt_read_scanline(fmt_info *finfo, RGBA *scan)
{
    int i, redd = 0;
    RGBA	rgba;

    memset(scan, 255, finfo->image[currentImage].w * sizeof(RGBA));

    for(i = 0;i < finfo->image[currentImage].w;i++)
    {
	redd = fread(&rgba, sizeof(RGBA), 1, fptr);

	scan[i].r = rgba.b;
	scan[i].g = rgba.g;
	scan[i].b = rgba.r;
    }

    return (redd == sizeof(RGBA)) ? SQERR_OK : SQERR_NOTOK;
}

int fmt_readimage(const char *file, RGBA **image, char **dump)
{
    XWDFileHeader m_xfh;

    FILE *m_fptr;
    int w, h, bpp, m_pal_entr, m_ncolors;
    RGB *m_pal = 0;
	    
    m_fptr = fopen(file, "rb");
		
    if(!m_fptr)
        return SQERR_NOFILE;

    XWDColor	color;
    char 	str[256];
    int		i;

    fread(&m_xfh, sizeof(XWDFileHeader), 1, m_fptr);

    fgets(str, 255, m_fptr);

    fseek(m_fptr, lLE2BE(m_xfh.header_size), SEEK_SET);

    m_pal_entr = m_ncolors = lLE2BE(m_xfh.ncolors);

    if((m_pal = (RGB*)calloc(m_ncolors, sizeof(RGB))) == NULL)
    {
	fclose(m_fptr);	
	return SQERR_NOMEMORY;
    }
    
    for(i = 0;i < m_ncolors;i++)
    {
	fread(&color, sizeof(XWDColor), 1, m_fptr);

	m_pal[i].r = (uchar)sLE2BE(color.red);
	m_pal[i].g = (uchar)sLE2BE(color.green);
	m_pal[i].b = (uchar)sLE2BE(color.blue);
    }

    w = lLE2BE(m_xfh.pixmap_width);
    h = lLE2BE(m_xfh.pixmap_height);
    bpp = lLE2BE(m_xfh.pixmap_depth);

    int bytes = w * h * sizeof(RGBA);
    
    asprintf(dump, "%s\n%d\n%d\n%d\n%s\nNO\n%d\n%d\n",
	fmt_quickinfo(),
	w,
	h,
	bpp,
	"RGB",
	1,
	bytes);
				    
    *image = (RGBA*)realloc(*image, bytes);
					
    if(!*image)
    {
        fprintf(stderr, "libSQ_read_pix: Image is null!\n");
        fclose(m_fptr);
        return SQERR_NOMEMORY;
    }

    memset(*image, 255, bytes);

    for(int h2 = 0;h2 < h;h2++)
    {
	int 	redd;
	RGBA	rgba;
        RGBA 	*scan = *image + h2 * w;

        memset(scan, 255, w * sizeof(RGBA));

	for(int s = 0;s < w;s++)
	{
	    redd = fread(&rgba, sizeof(RGBA), 1, fptr);

	    scan[s].r = rgba.b;
	    scan[s].g = rgba.g;
	    scan[s].b = rgba.r;
	}
    }

    fclose(m_fptr);
    
    if(m_pal)
	free(m_pal);

    return SQERR_OK;
}
			    
int fmt_close()
{
    fclose(fptr);
    
    if(pal)
	free(pal);

    return SQERR_OK;
}
