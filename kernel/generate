#!/bin/sh

if [ "x$1" = "x" ]; then echo "Need argument" && exit 0 ; fi

name=$1
mkdir $name
cd $name

create_build()
{
cat << EOF > compile-c++
#!/bin/sh

rm -f libSQ_read_$1.so

g++ -Wall -Werror -O2 -fPIC -c fmt_codec_$1.cpp

g++ -Wall -Werror -O2 -shared fmt_codec_$1.o -o libSQ_read_$1.so

rm -f fmt_codec_$1.o

EOF

chmod +x compile-c++
} # function

cat << EOF > Makefile.am
INCLUDES = -I.. -I../include

lib_LTLIBRARIES = libSQ_codec_${name}.la

libSQ_codec_${name}_la_SOURCES = fmt_codec_${name}.cpp fmt_codec_${name}_defs.h

libSQ_codec_${name}_la_LIBDADD = 

libSQ_codec_${name}_la_LDFLAGS = -release 0.1.0

LIBS = 
EOF

cat << EOF > fmt_codec_${name}.h
/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef KSQUIRREL_LIBS_CLASS_DEFINITION_${name}_H
#define KSQUIRREL_LIBS_CLASS_DEFINITION_${name}_H

#include "fmt_codec_base.h"

class fmt_codec : public fmt_codec_base
{
    public:

        fmt_codec();
        ~fmt_codec();

        virtual std::string     fmt_version();
        virtual std::string     fmt_quickinfo();
        virtual std::string     fmt_filter();
        virtual std::string     fmt_mime();
        virtual std::string     fmt_pixmap();

        virtual s32     fmt_init(std::string file);
        virtual s32     fmt_next();
        virtual s32     fmt_next_pass();
        virtual s32     fmt_read_scanline(RGBA *scan);
        virtual s32     fmt_readimage(std::string file, RGBA **image, std::string &dump);
        virtual void    fmt_close();

        virtual bool    fmt_writable() const;
        virtual void    fmt_getwriteoptions(fmt_writeoptionsabs *);
        virtual s32     fmt_writeimage(std::string file, RGBA *image, s32 w, s32 h, const fmt_writeoptions &opt);

    private:
	// define variables you need here
};

extern "C" fmt_codec_base* fmt_codec_create()
{
    return (new fmt_codec);
}

extern "C" void fmt_codec_destroy(fmt_codec_base *p)
{
    delete p;
}

#endif

EOF

cat << EOF > fmt_codec_${name}_defs.h
/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef KSQUIRREL_READ_IMAGE_${name}
#define KSQUIRREL_READ_IMAGE_${name}

// define constants here

#endif
EOF

cat << EOF > fmt_codec_${name}.cpp
/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include <csetjmp>
#include <sstream>
#include <iostream>

#include "fmt_types.h"
#include "fmt_codec_${name}_defs.h"
#include "fmt_codec_${name}.h"

#include "error.h"

// uncomment, if you need fmt_utils
//#define SQ_HAVE_FMT_UTILS
//#include "fmt_utils.h"

fmt_codec::fmt_codec() : fmt_codec_base()
{}

fmt_codec::~fmt_codec()
{}

std::string fmt_codec::fmt_version()
{
    return std::string("0.1.0");
}

std::string fmt_codec::fmt_quickinfo()
{
    return std::string("");
}

std::string fmt_codec::fmt_filter()
{
    return std::string("*. ");
}

std::string fmt_codec::fmt_mime()
{
    return std::string();
}

std::string fmt_codec::fmt_pixmap()
{
    return std::string("");
}

s32 fmt_codec::fmt_init(std::string file)
{
    frs.open(file.c_str(), ios::binary | ios::in);

    if(!frs.good())
        return SQERR_NOFILE;

    currentImage = -1;

    finfo.animated = false;
    finfo.images = 0;

    return SQERR_OK;
}

s32 fmt_codec::fmt_next()
{
    currentImage++;

    if(currentImage)
        return SQERR_NOTOK;

    finfo.image.push_back(fmt_image());




    s32 bytes = finfo.image[currentImage].w * finfo.image[currentImage].h * sizeof(RGBA);

    finfo.images++;

    stringstream s;

    s   << fmt_quickinfo() << "\n"
        << finfo.image[currentImage].w << "x"
        << finfo.image[currentImage].h << "\n"
        << finfo.image[currentImage].bpp << "\n"
        << "??" << "\n" // color model (RGB/RGBA/YUV/Color indexed ...)
        << "??" << "\n"       // compression (RLE/-/JPEG ...)
        << bytes;

    finfo.image[currentImage].dump = s.str();

    return SQERR_OK;
}

s32 fmt_codec::fmt_next_pass()
{
    return SQERR_OK;
}

s32 fmt_codec::fmt_read_scanline(RGBA *scan)
{
    RGB rgb;
    RGBA rgba;

    memset(scan, 255, finfo.image[currentImage].w * sizeof(RGBA));


    return SQERR_OK;
}

s32 fmt_codec::fmt_readimage(std::string file, RGBA **image, std::string &dump)
{
    s32                 w, h, bpp;
    s32                 m_bytes;
    jmp_buf             jmp;
    ifstreamK           m_frs;

    m_frs.open(file.c_str(), ios::binary | ios::in);

    if(!m_frs.good())
        return SQERR_NOFILE;

    if(setjmp(jmp))
    {
        m_frs.close();
        return SQERR_BADFILE;
    }

/*
    w = 
    h = 
    bpp = 
*/
    m_bytes = w * h * sizeof(RGBA);

    stringstream s;

    s   << fmt_quickinfo() << "\n"
        << w << "\n"
        << h << "\n"
        << bpp << "\n"
        << "??" << "\n"
        << "??" << "\n"
        << 1 << "\n"
        << m_bytes;

    dump = s.str();

    *image = (RGBA*)realloc(*image, m_bytes);

    if(!*image)
    {
        longjmp(jmp, 1);
    }

    memset(*image, 255, m_bytes);

    /*  reading ... */

    for(s32 h2 = 0;h2 < h;h2++)
    {
        RGBA    *scan = *image + h2 * w;


    }

    m_frs.close();

    return SQERR_OK;
}

void fmt_codec::fmt_close()
{
    frs.close();

    finfo.meta.clear();
    finfo.image.clear();
}

void fmt_codec::fmt_getwriteoptions(fmt_writeoptionsabs *opt)
{
    opt->interlaced = false;
    opt->compression_scheme = CompressionNo;
    opt->compression_min = 0;
    opt->compression_max = 0;
    opt->compression_def = 0;
    opt->color_space = SpaceInternal;
}

s32 fmt_codec::fmt_writeimage(std::string file, RGBA *image, s32 w, s32 h, const fmt_writeoptions &opt)
{
    return SQERR_OK;
}

bool fmt_codec::fmt_writable() const
{
    return false;
}

EOF

if [ "$2" = "-build" ]; then create_build $name; else echo; fi

echo
echo "All done!"
echo
echo "Don't forget to insert your copyrights"
echo
