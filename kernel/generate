#!/bin/sh

# Generate new development directory for image format
#
# Usage:
#  $ ./generate <format>
#  
#  or
#
#  $ ./generate <format> -build
#  to create compiling script
#
#  or
#
#  $ ./generate <format> -build -utils
#  to create compiling script and add support of fmt_utils
#
#  or
#
#  $ ./generate <format> -utils
#  to add support of fmt_utils (but don't generate compiling script)
#

HAVE_BUILD="no"
HAVE_UTILS="no"

if [ "x$1" = "x" ]; then echo "Need argument" && exit 0 ; fi

if [ "$2" = "-build" ]; then HAVE_BUILD="yes"; fi
if [ "$3" = "-build" ]; then HAVE_BUILD="yes"; fi

if [ "$2" = "-utils" ]; then HAVE_UTILS="yes"; fi
if [ "$3" = "-utils" ]; then HAVE_UTILS="yes"; fi

name=$1
mkdir $name
cd $name

create_build()
{
cat << EOF > compile-c++
#!/bin/sh

rm -f libSQ_codec_$1.so

g++ -I. -I.. -I../include -Wall -O2 -fPIC -c fmt_codec_$1.cpp
g++ -I. -I.. -I../include -Wall -O2 -fPIC -c ../fileio.cpp
EOF

if test $HAVE_UTILS = yes; then
echo "g++ -I. -I.. -I../include -Wall -O2 -fPIC -c ../fmt_utils.cpp" >> compile-c++;
fi

if test $HAVE_UTILS = no; then
echo "g++ -Wall -shared fileio.o fmt_codec_$1.o -o libSQ_codec_$1.so" >> compile-c++; else
echo "g++ -Wall -shared fileio.o fmt_utils.o fmt_codec_$1.o -o libSQ_codec_$1.so" >> compile-c++;
fi

echo "rm -f fmt_codec_$1.o fileio.o fmt_utils.o" >> compile-c++

chmod +x compile-c++
} # function

cat << EOF > Makefile.am
INCLUDES = -I.. -I../include

lib_LTLIBRARIES = libSQ_codec_${name}.la

EOF

if test $HAVE_UTILS = yes ; then
echo "libSQ_codec_${name}_la_SOURCES = fmt_codec_${name}.cpp fmt_codec_${name}_defs.h ../fileio.cpp ../fmt_utils.cpp" >> Makefile.am; else
echo "libSQ_codec_${name}_la_SOURCES = fmt_codec_${name}.cpp fmt_codec_${name}_defs.h ../fileio.cpp" >> Makefile.am;
fi

cat << EOF >> Makefile.am

libSQ_codec_${name}_la_LIBDADD = 

libSQ_codec_${name}_la_LDFLAGS = -release 0.1.0

LIBS = 
EOF

cat << EOF > fmt_codec_${name}.h
/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef KSQUIRREL_LIBS_CLASS_DEFINITION_${name}_H
#define KSQUIRREL_LIBS_CLASS_DEFINITION_${name}_H

#include "fmt_codec_base.h"

class fmt_codec : public fmt_codec_base
{
    public:

        fmt_codec();
        ~fmt_codec();

        virtual std::string     fmt_version();
        virtual std::string     fmt_quickinfo();
        virtual std::string     fmt_filter();
        virtual std::string     fmt_mime();
        virtual std::string     fmt_pixmap();

	virtual bool    fmt_readable() const;
        virtual s32     fmt_read_init(std::string file);
        virtual s32     fmt_read_next();
        virtual s32     fmt_read_next_pass();
        virtual s32     fmt_read_scanline(RGBA *scan);
        virtual void    fmt_read_close();

        virtual bool    fmt_writable() const;
        virtual void    fmt_getwriteoptions(fmt_writeoptionsabs *);

        virtual s32     fmt_write_init(std::string file, const fmt_image &image, const fmt_writeoptions &opt);
	virtual s32     fmt_write_next();
	virtual s32     fmt_write_next_pass();
	virtual s32     fmt_write_scanline(RGBA *scan);
        virtual void    fmt_write_close();

    private:
	// define variables you need here
};

extern "C" fmt_codec_base* fmt_codec_create()
{
    return (new fmt_codec);
}

extern "C" void fmt_codec_destroy(fmt_codec_base *p)
{
    delete p;
}

#endif

EOF

cat << EOF > fmt_codec_${name}_defs.h
/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef KSQUIRREL_CODEC_DEFS_${name}
#define KSQUIRREL_CODEC_DEFS_${name}

// define constants here

#endif
EOF

cat << EOF > fmt_codec_${name}.cpp
/*  This file is part of ksquirrel-libs (http://ksquirrel.sf.net)

    Copyright (c) 2005 Dmitry Baryshev <ksquirrel@tut.by>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    either version 2 of the License, or (at your option) any later
    version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include <iostream>

#include "fmt_types.h"
#include "fileio.h"

#include "fmt_codec_${name}_defs.h"
#include "fmt_codec_${name}.h"

#include "error.h"
EOF

if test $HAVE_UTILS = yes ; then
cat << EOF >> fmt_codec_${name}.cpp

#include "fmt_utils.h"
using namespace fmt_utils;
EOF
fi

cat << EOF >> fmt_codec_${name}.cpp

fmt_codec::fmt_codec() : fmt_codec_base()
{}

fmt_codec::~fmt_codec()
{}

std::string fmt_codec::fmt_version()
{
    return std::string("0.1.0");
}

std::string fmt_codec::fmt_quickinfo()
{
    return std::string("");
}

std::string fmt_codec::fmt_filter()
{
    return std::string("*. ");
}

std::string fmt_codec::fmt_mime()
{
    return std::string();
}

std::string fmt_codec::fmt_pixmap()
{
    return std::string("");
}

s32 fmt_codec::fmt_read_init(std::string file)
{
    frs.open(file.c_str(), ios::binary | ios::in);

    if(!frs.good())
        return SQE_R_NOFILE;

    currentImage = -1;
    read_error = false;

    finfo.animated = false;
    finfo.images = 0;

    return SQE_OK;
}

s32 fmt_codec::fmt_read_next()
{
    currentImage++;

    if(currentImage)
        return SQE_NOTOK;

    finfo.image.push_back(fmt_image());



    finfo.images++;
    finfo.image[currentImage].compression = "";
    finfo.image[currentImage].colorspace = "";

    return SQE_OK;
}

s32 fmt_codec::fmt_read_next_pass()
{
    return SQE_OK;
}

s32 fmt_codec::fmt_read_scanline(RGBA *scan)
{
    RGB rgb;
    RGBA rgba;

    memset(scan, 255, finfo.image[currentImage].w * sizeof(RGBA));


    return SQE_OK;
}

void fmt_codec::fmt_read_close()
{
    frs.close();

    finfo.meta.clear();
    finfo.image.clear();
}

void fmt_codec::fmt_getwriteoptions(fmt_writeoptionsabs *opt)
{
    opt->interlaced = false;
    opt->passes = 1;
    opt->compression_scheme = CompressionNo;
    opt->compression_min = 0;
    opt->compression_max = 0;
    opt->compression_def = 0;
    opt->needflip = false;
}

s32 fmt_codec::fmt_write_init(std::string file, const fmt_image &image, const fmt_writeoptions &opt)
{
    if(!image.w || !image.h || file.empty())
        return SQE_W_WRONGPARAMS;

    writeimage = image;
    writeopt = opt;

    fws.open(file.c_str(), ios::binary | ios::out);

    if(!fws.good())
        return SQE_W_NOFILE;

    return SQE_OK;
}

s32 fmt_codec::fmt_write_next()
{
    return SQE_OK;
}

s32 fmt_codec::fmt_write_next_pass()
{
    return SQE_OK;
}

s32 fmt_codec::fmt_write_scanline(RGBA *scan)
{

    return SQE_OK;
}

void fmt_codec::fmt_write_close()
{
    fws.close();
}

bool fmt_codec::fmt_writable() const
{
    return false;
}

bool fmt_codec::fmt_readable() const
{
    return true;
}
EOF

if test $HAVE_BUILD = yes ; then create_build $name; fi

echo
echo "All done!"
echo
echo "Don't forget to insert your copyrights"
echo
